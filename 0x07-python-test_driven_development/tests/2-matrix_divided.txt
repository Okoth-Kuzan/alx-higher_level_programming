===========================
How to Use matrix_divided.py
===========================

This module defines a function ``matrix_divided(matrix, div)`` to divide all elements in a matrix by a given divisor.

Usage
=====

``matrix_divided(matrix, div)`` returns a new matrix with elements divided by the given divisor.

::

    >>> matrix_divided = __import__('matrix_divided').matrix_divided
    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> divisor = 2
    >>> result = matrix_divided(matrix, divisor)
    >>> result
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

The function works with floating-point divisors as well.

::

    >>> matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
    >>> divisor = 3.5
    >>> result = matrix_divided(matrix, divisor)
    >>> result
    [[2.86, 5.71, 8.57], [11.43, 14.29, 17.14], [20.0, 22.86, 25.71]]

Errors and Exceptions
=====================

The function raises specific errors for different scenarios.

If the matrix is not a list of lists of integers or floats:

::

    >>> matrix_divided("invalid", 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If each row of the matrix does not have the same size:

::

    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

If the divisor is not a number (integer or float):

::

    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> matrix_divided(matrix, "invalid")
    Traceback (most recent call last):
    TypeError: div must be a number (integer or float)

If the divisor is zero:

::

    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

